// +build !ignore_autogenerated

//
// Copyright 2021 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Configmapshare) DeepCopyInto(out *Configmapshare) {
	*out = *in
	if in.Sharewith != nil {
		in, out := &in.Sharewith, &out.Sharewith
		*out = make([]TargetNamespace, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Configmapshare.
func (in *Configmapshare) DeepCopy() *Configmapshare {
	if in == nil {
		return nil
	}
	out := new(Configmapshare)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretConfigmapMembers) DeepCopyInto(out *SecretConfigmapMembers) {
	*out = *in
	if in.SecretMembers != nil {
		in, out := &in.SecretMembers, &out.SecretMembers
		*out = make(map[string]MemberPhase, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ConfigmapMembers != nil {
		in, out := &in.ConfigmapMembers, &out.ConfigmapMembers
		*out = make(map[string]MemberPhase, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretConfigmapMembers.
func (in *SecretConfigmapMembers) DeepCopy() *SecretConfigmapMembers {
	if in == nil {
		return nil
	}
	out := new(SecretConfigmapMembers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretShare) DeepCopyInto(out *SecretShare) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretShare.
func (in *SecretShare) DeepCopy() *SecretShare {
	if in == nil {
		return nil
	}
	out := new(SecretShare)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretShare) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretShareList) DeepCopyInto(out *SecretShareList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SecretShare, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretShareList.
func (in *SecretShareList) DeepCopy() *SecretShareList {
	if in == nil {
		return nil
	}
	out := new(SecretShareList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SecretShareList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretShareSpec) DeepCopyInto(out *SecretShareSpec) {
	*out = *in
	if in.Secretshares != nil {
		in, out := &in.Secretshares, &out.Secretshares
		*out = make([]Secretshare, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Configmapshares != nil {
		in, out := &in.Configmapshares, &out.Configmapshares
		*out = make([]Configmapshare, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretShareSpec.
func (in *SecretShareSpec) DeepCopy() *SecretShareSpec {
	if in == nil {
		return nil
	}
	out := new(SecretShareSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecretShareStatus) DeepCopyInto(out *SecretShareStatus) {
	*out = *in
	in.Members.DeepCopyInto(&out.Members)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretShareStatus.
func (in *SecretShareStatus) DeepCopy() *SecretShareStatus {
	if in == nil {
		return nil
	}
	out := new(SecretShareStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Secretshare) DeepCopyInto(out *Secretshare) {
	*out = *in
	if in.Sharewith != nil {
		in, out := &in.Sharewith, &out.Sharewith
		*out = make([]TargetNamespace, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Secretshare.
func (in *Secretshare) DeepCopy() *Secretshare {
	if in == nil {
		return nil
	}
	out := new(Secretshare)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetNamespace) DeepCopyInto(out *TargetNamespace) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetNamespace.
func (in *TargetNamespace) DeepCopy() *TargetNamespace {
	if in == nil {
		return nil
	}
	out := new(TargetNamespace)
	in.DeepCopyInto(out)
	return out
}
